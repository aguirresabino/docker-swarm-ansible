---
- name: Verify required variables are set
  ansible.builtin.assert:
    that:
      - swarm_primary_manager_host is defined
      - swarm_primary_manager_host != ""
      - swarm_worker_token is defined
      - swarm_worker_token != ""
    fail_msg: >
      Required variables swarm_primary_manager_host and swarm_worker_token
      must be set
    success_msg: "Required variables are properly configured"
  tags: [swarm, worker, validation]

- name: Check if node is already part of a swarm
  community.docker.docker_host_info:
    api_version: "auto"
  register: docker_host_info
  ignore_errors: true
  tags: [swarm, worker, check]

- name: Debug current swarm status
  ansible.builtin.debug:
    msg: |
      Docker Host Information:
      - Swarm Status: {{ docker_host_info.host_info.Swarm.LocalNodeState | default('inactive') }}
      - Is Manager: {{ docker_host_info.host_info.Swarm.ControlAvailable | default(false) }}
      - Node ID: {{ docker_host_info.host_info.Swarm.NodeID | default('N/A') }}
  tags: [swarm, worker, debug]

- name: Join Docker Swarm as worker
  community.docker.docker_swarm:
    state: join
    join_token: "{{ swarm_worker_token }}"
    remote_addrs: "{{ swarm_manager_addr }}"
    listen_addr: "{{ swarm_listen_addr }}"
    advertise_addr: "{{ ansible_host }}"
    api_version: "auto"
  register: swarm_join_result
  retries: "{{ swarm_join_retries }}"
  delay: "{{ swarm_join_delay }}"
  until: swarm_join_result is succeeded
  when:
    - >
      docker_host_info.host_info.Swarm.LocalNodeState | default('inactive')
      != 'active' or 
      docker_host_info.host_info.Swarm.ControlAvailable | default(false) == true
    - >
      docker_host_info.host_info.Swarm.LocalNodeState | default('inactive')
      != 'locked'
  ignore_errors: "{{ ansible_check_mode | default(false) }}"
  notify: Display worker join result
  tags: [swarm, worker, join]

- name: Wait for swarm state to stabilize
  ansible.builtin.pause:
    seconds: 3
  tags: [swarm, worker, join]

- name: Verify worker node joined successfully
  community.docker.docker_host_info:
    api_version: "auto"
  register: post_join_host_info
  tags: [swarm, worker, verify]

- name: Assert worker node is active in swarm
  ansible.builtin.assert:
    that:
      - post_join_host_info.host_info.Swarm is defined
      - post_join_host_info.host_info.Swarm.LocalNodeState is defined
      - post_join_host_info.host_info.Swarm.LocalNodeState == 'active'
      - post_join_host_info.host_info.Swarm.NodeID is defined
      - post_join_host_info.host_info.Swarm.NodeID != ''
      - post_join_host_info.host_info.Swarm.ControlAvailable == false
    fail_msg: "Worker node failed to join swarm properly or was promoted to manager"
    success_msg: "Worker node successfully joined swarm as worker"
  tags: [swarm, worker, verify]

- name: Display worker node information
  ansible.builtin.debug:
    msg: |
      Worker Node Successfully Joined Swarm:
      - Node ID: {{ post_join_host_info.host_info.Swarm.NodeID | default('N/A') }}
      - Node State: {{ post_join_host_info.host_info.Swarm.LocalNodeState | default('unknown') }}
      - Node Address: {{ post_join_host_info.host_info.Swarm.NodeAddr | default('N/A') }}
      - Is Manager: {{ post_join_host_info.host_info.Swarm.ControlAvailable | default('unknown') }}
      - Manager Addresses: {{ post_join_host_info.host_info.Swarm.RemoteManagers | default('N/A') }}
      - Cluster ID: {{ post_join_host_info.host_info.Swarm.Cluster.ID | default('N/A') }}
  when: post_join_host_info.host_info.Swarm is defined
  tags: [swarm, worker, info, molecule-notest]
