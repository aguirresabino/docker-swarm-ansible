---
# Emergency cleanup: Fix APT repository conflicts before doing anything else
- name: Remove all Docker repository files to fix APT conflicts
  ansible.builtin.shell: |
    rm -f /etc/apt/sources.list.d/*docker*
    rm -f /etc/apt/sources.list.d/docker.*
  changed_when: false
  failed_when: false
  when: docker_force_cleanup | bool
  tags: [docker]

- name: Remove all Docker GPG keys to fix APT conflicts
  ansible.builtin.shell: |
    rm -f /usr/share/keyrings/docker*
    rm -f /etc/apt/keyrings/docker*
  changed_when: false
  failed_when: false
  when: docker_force_cleanup | bool
  tags: [docker]

- name: Remove Docker entries from main sources.list to fix APT conflicts
  ansible.builtin.lineinfile:
    path: /etc/apt/sources.list
    regexp: '.*download\.docker\.com.*'
    state: absent
  tags: [docker]

- name: Force update APT cache after repository cleanup
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 300
  tags: [docker]

# Cleanup any existing conflicting Docker installations for idempotence
- name: Remove old Docker packages that might conflict
  ansible.builtin.apt:
    name:
      - docker.io
      - docker-doc
      - docker-compose
      - podman-docker
    state: absent
    update_cache: false
  tags: [docker]

# Set up Docker's apt repository following official documentation

- name: Update apt package index
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 3600
  tags: [docker]

- name: Install prerequisites for Docker repository
  ansible.builtin.apt:
    name:
      - ca-certificates
      - curl
    state: present
  tags: [docker]

- name: Create /etc/apt/keyrings directory
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'
  tags: [docker]

- name: Download Docker's official GPG key
  ansible.builtin.get_url:
    url: https://download.docker.com/linux/ubuntu/gpg
    dest: /etc/apt/keyrings/docker.asc
    mode: '0644'
    force: false
  register: docker_gpg_key_download
  tags: [docker]

- name: Ensure Docker GPG key has correct permissions
  ansible.builtin.file:
    path: /etc/apt/keyrings/docker.asc
    mode: 'a+r'
  tags: [docker]

- name: Get system architecture
  ansible.builtin.command: dpkg --print-architecture
  register: docker_system_architecture
  changed_when: false
  tags: [docker]

- name: Get Ubuntu codename
  ansible.builtin.shell: |
    . /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}"
  register: docker_ubuntu_codename
  changed_when: false
  tags: [docker]

- name: Add Docker repository to apt sources
  ansible.builtin.copy:
    content: >-
      deb [arch={{ docker_system_architecture.stdout }}
      signed-by=/etc/apt/keyrings/docker.asc]
      https://download.docker.com/linux/ubuntu
      {{ docker_ubuntu_codename.stdout }} stable
    dest: /etc/apt/sources.list.d/docker.list
    mode: '0644'
    backup: false
  notify: Update apt cache
  tags: [docker]

- name: Update apt package index after adding Docker repository
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 300
  tags: [docker]

- name: Install Docker packages (latest version)
  ansible.builtin.apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: present
    update_cache: true
  tags: [docker]

# Create the docker group and add user
- name: Create docker group
  ansible.builtin.group:
    name: docker
    state: present
  tags: [docker]

- name: Add user to docker group
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    groups: docker
    append: true
  tags: [docker]

# Configure Docker to start on boot with systemd
- name: Enable Docker service to start on boot
  ansible.builtin.systemd:
    name: docker.service
    enabled: true
  tags: [docker, services]

- name: Enable containerd service to start on boot
  ansible.builtin.systemd:
    name: containerd.service
    enabled: true
  tags: [docker, services]

- name: Start Docker service
  ansible.builtin.systemd:
    name: docker
    state: started
  tags: [docker, services, molecule-notest]

# Verify Docker installation
- name: Verify Docker installation
  ansible.builtin.command: docker --version
  register: docker_version
  changed_when: false
  tags: [docker, verify]

- name: Display Docker version
  ansible.builtin.debug:
    msg: "Docker installed successfully: {{ docker_version.stdout }}"
  tags: [docker, verify]

# Optional: Log in to Docker registry (if credentials provided)
- name: Log in to Docker registry
  community.docker.docker_login:
    username: "{{ docker_registry_username | default(omit) }}"
    password: "{{ docker_registry_password | default(omit) }}"
    registry_url: "{{ docker_registry_url | default('docker.io') }}"
  when: >-
    docker_registry_username is defined
    and docker_registry_password is defined
  tags: [docker, registry, molecule-notest]
